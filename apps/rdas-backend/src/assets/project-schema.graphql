type Agent {
	agent_name: String!
	created: DateTime!
	projectsisFundedBy: [Project!]! @relationship(type: "isFundedBy", direction: IN)
	updated: DateTime
}

type Disease {
	created: DateTime!
	gard_id: String!
	isClassOfDiseaseCategories: [DiseaseCategory!]! @relationship(type: "isClassOf", direction: OUT)
	isInvestigatedByProjects: [Project!]! @relationship(type: "isInvestigatedBy", direction: OUT)
	isRare: Boolean!
	mondo_id: String!
	name: String!
	synonym: [String]
}

type DiseaseCategory {
	category_id: String!
	created: DateTime!
	diseasesisClassOf: [Disease!]! @relationship(type: "isClassOf", direction: IN)
	name: String!
}

type Journal {
	created: DateTime!
	journal_title: String!
	publicationsisPublishedOn: [Publication!]! @relationship(type: "isPublishedOn", direction: IN)
	updated: DateTime
}

type PrincipalInvestigator {
	created: DateTime!
	hasFundedProjectOfProjects: [Project!]! @relationship(type: "hasFundedProjectOf", direction: OUT)
	org: String!
	org_state: String!
	pi_id: String!
	pi_name: String!
	updated: DateTime
}

type Project {
	application_id: String!
	created: DateTime!
	diseasesisInvestigatedBy: [Disease!]! @relationship(type: "isInvestigatedBy", direction: IN)
	funding_year: BigInt!
	hasPublicationPublications: [Publication!]! @relationship(type: "hasPublication", direction: OUT)
	isFundedByAgents: [Agent!]! @relationship(type: "isFundedBy", direction: OUT)
	principalInvestigatorshasFundedProjectOf: [PrincipalInvestigator!]! @relationship(type: "hasFundedProjectOf", direction: IN)
	project_abstract: [String]!
	project_num: String!
	project_term: String!
	project_title: String!
	total_cost: String!
}

type Publication {
	affiliation: String!
	authors: String!
	country: String!
	created: DateTime!
	isPublishedOnJournals: [Journal!]! @relationship(type: "isPublishedOn", direction: OUT)
	pmc: String!
	pmid: BigInt!
	projectshasPublication: [Project!]! @relationship(type: "hasPublication", direction: IN)
	pub_date: String!
	pub_issue: String!
	pub_page: String!
	pub_title: String!
	pub_volume: String!
	pub_year: BigInt!
	updated: DateTime
}

type Queryz {
    stringytest: String!
        @cypher(
            statement:"""
            MATCH (n:Disease)
            WITH size((n)-[:isInvestigatedBy]->(:Project)) AS count, n
            Return n.gard_id, count ORDER BY count DESC
           """
        )
}
