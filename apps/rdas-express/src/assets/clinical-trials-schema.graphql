type Annotation @exclude(operations: [CREATE, DELETE, UPDATE]){
  CandidatePreferred: String!
  MATCH_TYPE: String!
  SEMANTIC_TYPE: [String]
  UMLS: String
  conditionshasAnnotation: [Condition!]!
    @relationship(
      type: "has_annotation"
      direction: IN
      properties: "HasAnnotationProperties"
    )
  mappedToGardGards: [GARD!]!
    @relationship(type: "mapped_to_gard", direction: OUT)
}

type ClinicalTrial @exclude(operations: [CREATE, DELETE, UPDATE]){
  Acronym: String
  BriefSummary: String!
  BriefTitle: String!
  CompletionDate: String
  CompletionDateType: String
  DateCreatedRDAS: String!
  LastKnownStatus: String
  LastUpdatePostDate: String!
  LastUpdatePostDateType: String!
  LastUpdateSubmitDate: String!
  LastUpdatedRDAS: String!
  NCTId: String!
  NCTIdAlias: [String]
  OfficialTitle: String
  OverallStatus: String!
  Phase: [String]
  PrimaryCompletionDate: String
  PrimaryCompletionDateType: String
  ResultsFirstPostDate: String
  ResultsFirstPostDateType: String
  ResultsFirstPostedQCCommentsDate: String
  ResultsFirstPostedQCCommentsDateType: String
  StartDate: String
  StartDateType: String
  StudyFirstPostDate: String!
  StudyFirstPostDateType: String!
  StudyType: String!
  collaboratedWithCollaborators: [Collaborator!]!
    @relationship(type: "collaborated_with", direction: OUT)
  expandedAccessInfoExpandedAccesses: [ExpandedAccess!]!
    @relationship(type: "expanded_access_info", direction: OUT)
  hasIndividualPatientDataIndividualPatientData: [IndividualPatientData!]!
    @relationship(type: "has_individual_patient_data", direction: OUT)
  hasInterventionInterventions: [Intervention!]!
    @relationship(type: "has_intervention", direction: OUT)
  hasParticipantInfoParticipants: [Participant!]!
    @relationship(type: "has_participant_info", direction: OUT)
  hasStudyDesignStudyDesigns: [StudyDesign!]!
    @relationship(type: "has_study_design", direction: OUT)
  inLocationsLocations: [Location!]!
    @relationship(type: "in_locations", direction: OUT)
  investigatesConditionConditions: [Condition!]!
    @relationship(type: "investigates_condition", direction: OUT)
  patientRegistryInfoPatientRegistries: [PatientRegistry!]!
    @relationship(type: "patient_registry_info", direction: OUT)
  referencesisAbout: [Reference!]!
    @relationship(type: "is_about", direction: IN)
  sponsoredBySponsors: [Sponsor!]!
    @relationship(type: "sponsored_by", direction: OUT)
}

type Collaborator @exclude(operations: [CREATE, DELETE, UPDATE]){
  CollaboratorClass: String!
  CollaboratorName: String!
  clinicalTrialscollaboratedWith: [ClinicalTrial!]!
    @relationship(type: "collaborated_with", direction: IN)
}

type Condition @exclude(operations: [CREATE, DELETE, UPDATE]){
  Condition: String!
  clinicalTrialsinvestigatesCondition: [ClinicalTrial!]!
    @relationship(type: "investigates_condition", direction: IN)
  hasAnnotationAnnotations: [Annotation!]!
    @relationship(
      type: "has_annotation"
      direction: OUT
      properties: "HasAnnotationProperties"
    )
}

type Drug @exclude(operations: [CREATE, DELETE, UPDATE]){
  ACTIVATED: [String]
  ANDA: [String]
  ATC: [String]
  AVAILABLE_STRENGTH: [String]
  BLA: [String]
  BN_CARDINALITY: [String]
  CVX: [String]
  DRUGBANK: [String]
  GENERAL_CARDINALITY: [String]!
  HUMAN_DRUG: [String]
  IN_EXPRESSED_FLAG: [String]
  MESH: [String]
  MMSL_CODE: [String]
  NDA: [String]
  NHRIC: [String]
  ORIG_CODE: [String]
  ORIG_SOURCE: [String]
  PRESCRIBABLE: [String]
  PrescribableSynonym: [String]
  QUALITATIVE_DISTINCTION: [String]
  QUANTITY: [String]
  RXNAV_HUMAN_DRUG: [String]
  RXNAV_STR: [String]!
  RXNAV_VET_DRUG: [String]
  RxCUI: [String]!
  RxNormID: BigInt!
  RxNormName: [String]!
  RxNormSynonym: [String]
  SCHEDULE: [String]
  SNOMEDCT: [String]
  SPL_SET_ID: [String]
  STRENGTH: [String]
  Source: [String]
  TTY: [String]!
  TallmanSynonym: [String]
  UNII_CODE: [String]
  USP: [String]
  VET_DRUG: [String]
  VUID: [String]
  interventionsmappedToRxnorm: [Intervention!]!
    @relationship(
      type: "mapped_to_rxnorm"
      direction: IN
      properties: "MappedToRxnormProperties"
    )
}

type ExpandedAccess @exclude(operations: [CREATE, DELETE, UPDATE]){
  ExpAccTypeIndividual: String
  ExpAccTypeIntermediate: String
  ExpAccTypeTreatment: String
  ExpandedAccessNCTId: String
  ExpandedAccessStatusForNCTId: String
  HasExpandedAccess: String
  clinicalTrialsexpandedAccessInfo: [ClinicalTrial!]!
    @relationship(type: "expanded_access_info", direction: IN)
}

type GARD @exclude(operations: [CREATE, DELETE, UPDATE]){
  GardId: String!
  GardName: String!
  Synonyms: [String]!
  UMLS: [String]
  UMLS_Source: String!
  annotationsmappedToGard: [Annotation!]!
    @relationship(type: "mapped_to_gard", direction: IN)
}

interface HasAnnotationProperties @relationshipProperties {
  FUZZY_SCORE: BigInt
  METAMAP_SCORE: BigInt
}

type IndividualPatientData @exclude(operations: [CREATE, DELETE, UPDATE]){
  IPDSharing: String!
  IPDSharingAccessCriteria: String
  IPDSharingDescription: String
  IPDSharingInfoType: [String]
  IPDSharingTimeFrame: String
  IPDSharingURL: String
  clinicalTrialshasIndividualPatientData: [ClinicalTrial!]!
    @relationship(type: "has_individual_patient_data", direction: IN)
}

type Intervention @exclude(operations: [CREATE, DELETE, UPDATE]){
  InterventionDescription: String
  InterventionName: String
  InterventionType: String!
  clinicalTrialshasIntervention: [ClinicalTrial!]!
    @relationship(type: "has_intervention", direction: IN)
  mappedToRxnormDrugs: [Drug!]!
    @relationship(
      type: "mapped_to_rxnorm"
      direction: OUT
      properties: "MappedToRxnormProperties"
    )
}

type Location @exclude(operations: [CREATE, DELETE, UPDATE]){
  LocationCity: String
  LocationCountry: String
  LocationFacility: String
  LocationState: String
  LocationStatus: String
  LocationZip: String
  clinicalTrialsinLocations: [ClinicalTrial!]!
    @relationship(type: "in_locations", direction: IN)
}

interface MappedToRxnormProperties @relationshipProperties {
  WITH_SPACY: Boolean!
}

type Participant @exclude(operations: [CREATE, DELETE, UPDATE]){
  EligibilityCriteria: String!
  clinicalTrialshasParticipantInfo: [ClinicalTrial!]!
    @relationship(type: "has_participant_info", direction: IN)
}

type PatientRegistry @exclude(operations: [CREATE, DELETE, UPDATE]){
  PatientRegistry: String!
  clinicalTrialspatientRegistryInfo: [ClinicalTrial!]!
    @relationship(type: "patient_registry_info", direction: IN)
}

type Reference @exclude(operations: [CREATE, DELETE, UPDATE]){
  ReferenceCitation: String!
  ReferencePMID: String
  ReferenceType: String!
  isAboutClinicalTrials: [ClinicalTrial!]!
    @relationship(type: "is_about", direction: OUT)
}

type Sponsor @exclude(operations: [CREATE, DELETE, UPDATE]){
  LeadSponsorClass: String!
  LeadSponsorName: String!
  clinicalTrialssponsoredBy: [ClinicalTrial!]!
    @relationship(type: "sponsored_by", direction: IN)
}

type StudyDesign @exclude(operations: [CREATE, DELETE, UPDATE]){
  DesignAllocation: String
  DesignInterventionModel: String
  DesignInterventionModelDescription: String
  DesignMasking: String
  DesignMaskingDescription: String
  DesignObservationalModel: [String]
  DesignPrimaryPurpose: String
  DesignTimePerspective: [String]
  DetailedDescription: String
  SamplingMethod: String
  clinicalTrialshasStudyDesign: [ClinicalTrial!]!
    @relationship(type: "has_study_design", direction: IN)
}

type Query {
  clinicalTrialsByGardList(
    gardId: String
    offset: Int
    limit: Int
  ): [ClinicalTrial]
    @cypher(
      statement: """
      MATCH (n:GARD)-[m:mapped_to_gard]-(a:Annotation)-[h:has_annotation]-(c:Condition)-[i:investigates_condition]-(cl:ClinicalTrial)
       WHERE n.GardId= $gardId
       return distinct(cl)
      ORDER BY cl.StartDate DESC
      SKIP $offset
      LIMIT $limit
      """
    )
}

type Query {
  clinicalTrialsByGardCount(gardId: String): BigInt
    @cypher(
      statement: """
      MATCH (n:GARD)-[m:mapped_to_gard]-(a:Annotation)-[h:has_annotation]-(c:Condition)-[i:investigates_condition]-(cl:ClinicalTrial)
        WHERE n.GardId= $gardId
      RETURN count(distinct(cl))
      """
    )
}
