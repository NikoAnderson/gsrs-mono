interface AssociatedWithGeneProperties @relationshipProperties {
  AssociationStatus: String!
  AssociationType: String!
  Reference: [String]
}

type GARD @exclude(operations: [CREATE, DELETE, UPDATE]){
  COUNT_ARTICLES: BigInt!
  COUNT_GENES: BigInt!
  COUNT_PHENOTYPES: BigInt!
  COUNT_PROJECTS: BigInt!
  COUNT_TRIALS: BigInt!
  ClassificationLevel: String!
  DataSource: String!
  DataSourceId: String!
  DiseaseOntology: [String]
  DisorderType: [String]!
  GardId: String!
  GardName: String!
  GeneticAlliance: [String]
  GeneticsHomeReference: [String]
  ICD10: [String]
  ICD10CM: [String]
  ICD11: [String]
  MeSH: [String]
  MedDRA: [String]
  OMIM: [String]
  Orphanet: [String]
  SNOMEDCT: [String]
  Synonyms: [String]!
  UMLS: [String]
  associatedWithGeneGenes: [Gene!]!
    @relationship(
      type: "associated_with_gene"
      direction: OUT
      properties: "AssociatedWithGeneProperties"
    )
  gardSsubClassOf: [GARD!]! @relationship(type: "subClassOf", direction: IN)
  hasPhenotypePhenotypes: [Phenotype!]!
    @relationship(
      type: "has_phenotype"
      direction: OUT
      properties: "HasPhenotypeProperties"
    )
  subClassOfGards: [GARD!]! @relationship(type: "subClassOf", direction: OUT)
}

type Gene @exclude(operations: [CREATE, DELETE, UPDATE]){
  Ensembl: String
  GeneIdentifier: String!
  GeneSymbol: String!
  GeneSynonyms: [String]
  GeneTitle: String!
  IUPHAR: String
  Locus: String!
  OMIM: String
  Reactome: String
  Swissprot: String
  gardSassociatedWithGene: [GARD!]!
    @relationship(
      type: "associated_with_gene"
      direction: IN
      properties: "AssociatedWithGeneProperties"
    )
}

interface HasPhenotypeProperties @relationshipProperties {
  Evidence: String!
  HPOFrequency: String
  Reference: [String]!
  ValidationStatus: Boolean!
}

type Phenotype @exclude(operations: [CREATE, DELETE, UPDATE]){
  HPOId: String!
  HPOTerm: String!
  Modifier: [String]
  Online: Boolean!
  Onset: String
  Sex: String
  gardShasPhenotype: [GARD!]!
    @relationship(
      type: "has_phenotype"
      direction: IN
      properties: "HasPhenotypeProperties"
    )
}

scalar JSON

type Query {
  diseaseSearch(searchString: String): [GARD]
    @cypher(
      statement: """
      CALL db.index.fulltext.queryNodes(
        'allNameIndex', $searchString)
      YIELD node RETURN node LIMIT 10
      """
    )
}

type Query {
  treeParent: [JSON]
    @cypher(
      statement: """
      match (l:GARD)<-[s:subClassOf]-(:GARD) WHERE NOT (l:GARD)-[:subClassOf]->(:GARD)
      WITH COUNT(s) as childrenCount, l
      WITH {gardId: l.GardId, name: l.GardName, _childrenCount: childrenCount } as parents
      return collect(DISTINCT(parents))
      """
    )
}

type Query {
  treeBranch(searchString: String): [JSON]
    @cypher(
      statement: """
      match (l:GARD)<-[s:subClassOf]-(:GARD) WHERE NOT (l:GARD)-[:subClassOf]->(:GARD)
          WITH COUNT(s) as childrenCount, l
      WITH {gardId: l.GardId, name: l.GardName, _childrenCount:childrenCount} as parents
        match p=(:GARD {GardId: $searchString})-[r:subClassOf*0..]->(n:GARD) WHERE NOT (n:GARD)-[:subClassOf]->(:GARD)
         return {paths: collect(distinct(p)), nodes: collect(distinct(parents))}
      """
    )
}

type Query {
  treeBranchNew(searchString: String): [JSON]
    @cypher(
      statement: """
      MATCH (p:GARD {GardId: $searchString})
      CALL apoc.path.spanningTree(p, {
          relationshipFilter: "<subClassOf",
          labelFilter: "GARD"
      })
      YIELD path
      return {paths: collect(distinct(path)), nodes: collect(distinct(nodes(path)))}
      """
    )
}

type Query {
  hierarchyDiseases(searchString: String, limit: Int, skip: Int): [GARD]
    @cypher(
      statement: """
      match (d)-[*0..]->(e) WHERE e.GardId = $searchString
      with distinct(d) as ds
      SKIP $skip
      LIMIT $limit
      return ds
      """
    )
}

type Query {
  hierarchyDiseasesCount(searchString: String, limit: Int, skip: Int): Int
    @cypher(
      statement: """
      match (d)-[*0..]->(e) WHERE e.GardId = $searchString
      with count(distinct d) as count
      return count
      """
    )
}

type FilterCount @exclude(operations: [CREATE, DELETE, UPDATE]){
  term: String
  count: Int
}

type Query {
  phenotypeSearch(skip: Int, limit: Int, term: String): [FilterCount]
    @cypher(
      statement: """
      CALL db.index.fulltext.queryNodes('phenotypeTermIndex', $term)
      YIELD node
      MATCH(node)-[]-(g:GARD)
      WITH count(distinct(g)) as nCount, node
      with {term: node.HPOTerm, count: nCount } as ret
      ORDER BY ret.count DESC
      SKIP $skip
      LIMIT $limit
      return ret
      """
    )
}

type Query {
  phenotypeCounts(skip: Int, limit: Int, terms: [String]): [FilterCount]
    @cypher(
      statement: """
      MATCH (n:Phenotype)<-[r:has_phenotype]-(g:GARD)
      WHERE NOT n.HPOTerm IN $terms
      WITH count(distinct(g)) as nCount, n
      WITH {term: n.HPOTerm, count: nCount} as ret
      ORDER BY ret.count DESC
      SKIP $skip
      LIMIT $limit
      return ret
      """
    )
}
type Query {
  phenotypeFilteredCounts(terms: [String]): [FilterCount]
    @cypher(
      statement: """
      MATCH (n:Phenotype)<-[r:has_phenotype]-(g:GARD)
      WHERE n.HPOTerm IN $terms
      WITH count(distinct(g)) as nCount, n
      WITH {term: n.HPOTerm, count: nCount} as ret
      ORDER BY ret.count DESC
      return ret
      """
    )
}

type Query {
  geneSearch(skip: Int, limit: Int, term: String): [FilterCount]
    @cypher(
      statement: """
      CALL db.index.fulltext.queryNodes('geneTermIndex', $term)
      YIELD node
      MATCH(node)-[]-(g:GARD)
      WITH count(distinct(g)) as nCount, node
      WITH {term: node.GeneSymbol, count: nCount} as ret
      ORDER BY ret.count DESC
      SKIP $skip
      LIMIT $limit
      return ret
      """
    )
}

type Query {
  geneCounts(skip: Int, limit: Int, terms: [String]): [FilterCount]
    @cypher(
      statement: """
      MATCH (n:Gene)<-[r]-(g:GARD)
      WHERE NOT n.GeneSymbol IN $terms
      WITH count(distinct(g)) as nCount, n
      WITH {term: n.GeneSymbol, count: nCount} as ret
      ORDER BY ret.count DESC
      SKIP $skip
      LIMIT $limit
      return ret
      """
    )
}

type Query {
  geneFilteredCounts(terms: [String]): [FilterCount]
    @cypher(
      statement: """
      MATCH (n:Gene)<-[r]-(g:GARD)
      WHERE n.GeneSymbol IN $terms
      WITH count(distinct(g)) as nCount, n
      WITH {term: n.GeneSymbol, count: nCount} as ret
      ORDER BY ret.count DESC
      return ret
      """
    )
}
