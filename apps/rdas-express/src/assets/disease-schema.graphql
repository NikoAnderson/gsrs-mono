type GARD {
	ClassificationLevel: String!
	DisorderType: String!
	GardId: String!
	GardName: String!
	Synonyms: [String]
	gardSsubClassOf: [GARD!]! @relationship(type: "subClassOf", direction: IN)
	subClassOfGards: [GARD!]! @relationship(type: "subClassOf", direction: OUT)
}

scalar JSON

type GARDList {
  diseases: [GARD]!
  count: Int!
}


type Query {
  diseaseSearch(searchString: String): [GARD] @cypher(
    statement: """
      CALL db.index.fulltext.queryNodes(
        'allNameIndex', $searchString)
      YIELD node RETURN node LIMIT 10
    """
  )
}

type Query {
  treeParent: [JSON] @cypher(
    statement: """
    match (l:GARD)<-[s:subClassOf]-(:GARD) WHERE NOT (l:GARD)-[:subClassOf]->(:GARD)
    WITH {gardId: l.GardId, name: l.GardName, _childrenCount: COUNT(s)} as parents
    return collect(DISTINCT(parents))
    """
  )
}

type Query {
  treeBranch(searchString: String):[JSON] @cypher(
    statement: """
 match (l:GARD)<-[s:subClassOf]-(:GARD) WHERE NOT (l:GARD)-[:subClassOf]->(:GARD) WITH
  {gardId: l.GardId, name: l.GardName, _childrenCount: COUNT(s)} as parents
   match p=(:GARD {GardId: $searchString})-[r:subClassOf*0..]->(n:GARD) WHERE NOT (n:GARD)-[:subClassOf]->(:GARD)
    return {paths: collect(distinct(p)), nodes: collect(distinct(parents))}
 """
  )
}

type Query {
  hierarchyDiseases(searchString: String, limit: Int, skip: Int): [GARD] @cypher(
    statement: """
 match (d)-[*0..]->(e) WHERE e.GardId = $searchString
 with distinct(d) as ds
 SKIP $skip
 LIMIT $limit
 return ds
 """
  )
}

type Query {
  hierarchyDiseasesCount(searchString: String, limit: Int, skip: Int): Int @cypher(
  statement: """
 match (d)-[*0..]->(e) WHERE e.GardId = $searchString
 with count(distinct d) as count
 return count
 """
  )
}
